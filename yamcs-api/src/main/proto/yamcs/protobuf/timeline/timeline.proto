syntax="proto2";

package yamcs.protobuf.timeline;
option java_package = "org.yamcs.protobuf.timeline";
option java_outer_classname = "TimelineProto";
option java_multiple_files = true;

import "yamcs/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "yamcs/protobuf/activities/activities.proto";

//Methods related to the Timeline Service.
// Note the relationship with the Activities service:
// - the Timeline service is responsible for scheduling and starting the activities
// - the Activities service is responsible for their definition and execution
service TimelineApi {

  // Create an item
  rpc CreateItem(CreateItemRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      post: "/api/timeline/{instance}/items"
      body: "*"
    };
  }

  // Get an item
  rpc GetItem(GetItemRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/items/{id}"
    };
  }
  
  // Update an item
  rpc UpdateItem(UpdateItemRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      put: "/api/timeline/{instance}/items/{id}"
      body: "*"
    };
  }

  // List items
  rpc ListItems(ListItemsRequest) returns (ListItemsResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/items"
    };
  }

  // Delete an item
  rpc DeleteItem(DeleteItemRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      delete: "/api/timeline/{instance}/items/{id}"
    };
  }

  // Get an item log
  rpc GetItemLog(GetItemLogRequest) returns (TimelineItemLog) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/items/{id}/log"
    };
  }

  //add an entry to the item log table
  // The timestamp from the messages is used if specified; if not specified, the current mission time will be used 
  rpc AddItemLog(AddItemLogRequest) returns (LogEntry) {
    option (yamcs.api.route) = {
      post: "/api/timeline/{instance}/items/{id}/log"
    };
  }
    
  // Delete a group
  rpc DeleteTimelineGroup(DeleteTimelineGroupRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      delete: "/api/timeline/{instance}/groups/{id}"
    };
  }

  // List timeline sources
  //
  // Usually there is a source named 'rdb' which provides items from an internal RocksDB database.
  // Other external sources may be created by adding plugins (e.g. a shift planner)
  rpc ListSources(ListSourcesRequest) returns (ListSourcesResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/sources"
    };
  }
  
  // List all tags available for the 'rdb' source.
  //
  // Note that currently the 'rdb' source does not discard unused tags
  // (e.g. if all item using one tag have been deleted, the tag will still be returned by this call)
  rpc ListTags(ListTimelineTagsRequest) returns (ListTimelineTagsResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/tags"
    };
  }
  
  // Add a band.
  rpc AddBand(AddBandRequest) returns (TimelineBand) {
    option (yamcs.api.route) = {
      post: "/api/timeline/{instance}/bands"
      body: "*"
    };
  }

  // Get a band
  rpc GetBand(GetBandRequest) returns (TimelineBand) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/bands/{id}"
    };
  }

  // List all bands
  rpc ListBands(ListBandsRequest) returns (ListBandsResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/bands"
    };
  }

  // Update a band
  rpc UpdateBand(UpdateBandRequest) returns (TimelineBand) {
    option (yamcs.api.route) = {
      put: "/api/timeline/{instance}/bands/{id}"
      body: "*"
    };
  }

  // Delete a band
  rpc DeleteBand(DeleteBandRequest) returns (TimelineBand) {
    option (yamcs.api.route) = {
      delete: "/api/timeline/{instance}/bands/{id}"
    };
  }

  // Add a view
  rpc AddView(AddViewRequest) returns (TimelineView) {
    option (yamcs.api.route) = {
      post: "/api/timeline/{instance}/views"
      body: "*"
    };
  }

  // Get a view
  rpc GetView(GetViewRequest) returns (TimelineView) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/views/{id}"
    };
  }

  // List all views
  rpc ListViews(ListViewsRequest) returns (ListViewsResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/views"
    };
  }

  // Update a view
  rpc UpdateView(UpdateViewRequest) returns (TimelineView) {
    option (yamcs.api.route) = {
      put: "/api/timeline/{instance}/views/{id}"
      body: "*"
    };
  }

  // Delete a view
  rpc DeleteView(DeleteViewRequest) returns (TimelineView) {
    option (yamcs.api.route) = {
      delete: "/api/timeline/{instance}/views/{id}"
    };
  }

  // Start an activity. The activity must be in the PLANNED status
  // For manual activities it just changes the status
  // For automated activities it calls the start activity in the activity service
  rpc StartActivity(StartActivityRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      post: "/api/activities/{instance}"
      body: "*"
    };
  }

  // End a running activity.
  // For manual activities it just changes the status
  // For automated activities it calls the end activity in the activity service
  rpc EndActivity(EndActivityRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      post: "/api/activities/{instance}/{id}"
      body: "*"
    };
  }
}

message RelativeTime {
  // Identifier of the item that this time is relative to.
  optional string relto = 1;
	
  optional google.protobuf.Duration relativeStart = 2;
}

enum TimelineItemType {
  //events are the most generic timeline items.
  EVENT = 1;
	
  //unlike events, activities have an execution status
  //manual activity's execution status is controlled by an operator
  MANUAL_ACTIVITY = 2;
	
  //activity which is automatically executed on the server (the status changes automatically)
  AUTO_ACTIVITY = 3;

  //a grouping of other items (events and/or activities)
  ITEM_GROUP = 4;
	
  //a grouping of activities - unlike the ITEM_GROUP, this group in itself is an automated activity
  ACTIVITY_GROUP = 5;
}

enum DependencyType {
  //start to start
  ACTIVITY_START = 1;
  //finish to start
  ACTIVITY_END = 2;

  //other types of events:
  // parameters
  // packets
  // alarms...
}

// Models a dependency:
//   activity A will start after activity B has started/completed
//
// This message is used inside the definition of activity A
message Dependency {
  optional DependencyType type = 1;

  // if type = ACTIVITY_START or ACTIVITY_END, this is the id of the activity B
  optional string activityId = 2;

  //if specified, the activity A will start after this time from the event
  optional google.protobuf.Duration lagTime = 3;

  // The activity will be started only if the conditions hold true
  // If type = ACTIVITY_END, the condition may include the status of activity B
  // repeated Condition conditions = 4;
}

message TimelineItem {
  // Item identifier.
  // The identifier is set and recognized by the source.
  // It is possible but unlikely that two items coming from two different sources will have the same id.
  // The rdb source sets the id to an uuid
  // The commands source sets the id to the command id
  optional string id = 1;
  
  // Item name
  optional string name = 2;
  
  optional TimelineItemType type = 3;
  optional google.protobuf.Timestamp start = 4;

  // if this item time specification is relative to another item, relativeTime contains a reference
  // to that item as well as the relative start (the duration is the same as given by the duration above)
  //note that start of the item will be computed by the server based on the relativeStart before sending the item to the client
  optional RelativeTime relativeStart = 5;

  optional google.protobuf.Duration duration = 6;
  repeated string tags = 7;

  //if this item is part of a group, this is the group identifier
  optional string groupId = 8;
    
  //item description
  optional string description = 9;

  //The fields below are valid for activities
  
  //definition of the activity - defines its type and link to external resources (manual stack, script, etc)
  optional yamcs.protobuf.activities.ActivityDefinition activityDefinition = 10;

  // the list of activities this activity depends on
  // If the list is not empty, the activity will be started only after all dependencies are satisfied
  // If one dependency is not satisfied then this activity will be skipped
  repeated Dependency dependencies = 11;

  //if the dependencies list is not empty and this property is true, then start the activity as soon as all the dependencies are satisfied, ignoring the start time.
  // if this is false, then the activity will be started after the start time (and after all dependencies are satisfied)
  // if the dependency list is empty, this property has no effect
  optional bool allowEarlyStart = 12;

  //if true means the activity will automatically start when the time is due
  // otherwise the activity has to be started manually. The operator should be informed in this case that the activity has to start.
  // by default the flag is set to false for manual activities and true for automated activities
  optional bool autoRun = 13;
  
  //The activity status.
  optional yamcs.protobuf.activities.ExecutionStatus activityStatus = 14;

  //if the activity has started this indicates the actual start time
  optional google.protobuf.Timestamp actualStart = 15;

  //if the activity has ended this indicates the actual end time
  optional google.protobuf.Timestamp actualEnd = 16;
  
  //If the activity has failed this gives the reason
  optional string failureReason = 17;
  
  //for automated activities which have been started, contains the runId from the activities service
  optional string activityRunId = 18;
}

message LogEntry {
  optional google.protobuf.Timestamp time = 1;
  optional string user = 2;
  optional string type = 3;
  optional string msg = 4;
}

message TimelineItemLog {
  optional string id = 1;
  //item (change) log
  repeated LogEntry entries = 2;
}

enum TimelineBandType {
  TIME_RULER = 1;
  ITEM_BAND = 2;
  SPACER = 3;
  COMMAND_BAND = 4;
}

message TimelineBand {
  // Yamcs instance name
  optional string instance = 1;

  // Band identifier. This is a UUID
  optional string id = 2;

  // Band name
  optional string name = 3;

  //user who has created the band
  optional string username = 4;

  //if true, all users have access to this band, otherwise only the user who has created it
  optional bool shared = 5;

  //the band contains only items from this source
  optional string source = 6;

  //the band contains only items with these tags; if the list is empty, then all items from the given source are part of the band
  //this is deprecated, the filters below should be used to select the items
  repeated string tags = 7 [deprecated=true];

  //The filters are to be considered in an AND manner.
  // An item will be part of the band if it matches all the filters.
  // If the list is empty, then all items from the given source are part of the band
  repeated ItemFilter filters = 8;

  // Type of band
  optional TimelineBandType type = 9;

  // Band description
  optional string description = 10;

  // Additional properties used by yamcs-web to render this band
  map<string, string> properties = 11;
}

message TimelineView {
  // Yamcs instance name
  optional string instance = 1;

  // View identifier. This is a UUID
  optional string id = 2;

  // View name
  optional string name = 3;

  // View description
  optional string description = 4;

  // array of bands
  repeated TimelineBand bands = 5;
}

/******************* Items ***********************/
message CreateItemRequest {
  // Yamcs instance name
  optional string instance = 1;
  
  // Item source
  optional string source = 2;
  
  // Item name
  optional string name = 3;
  
  // Type of item
  optional TimelineItemType type = 4;

  //item start. The start and the relativeTime (below) are mutually exclusive
  optional google.protobuf.Timestamp start = 5;
  
  //item duration. Applies also if the relativeTime is specified
  optional google.protobuf.Duration duration = 6;
  
  //tags
  repeated string tags = 7;

  //if this item is part of a group, this is the group identifier
  optional string groupId = 8;
    
  //if this item time specification is relative to another item, relativeTime contains a reference
  // to that item as well as the relative start (the duration is the same as given by the duration above)
  optional RelativeTime relativeTime = 9;

  //item description
  optional string description = 10;
}

message GetItemRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;
}

message UpdateItemRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;
  
  // Item name
  optional string name = 4;

  //new start time
  // to keep the old value, leave out the property
  // to clear, set the relativeStart
   optional google.protobuf.Timestamp start = 5;

  //new relative start
  // to keep the old value, leave out the property
  // to clear, set the start
  optional RelativeTime relativeStart = 6;

  //new duration
  optional google.protobuf.Duration duration = 7;

  //new tags
  repeated string tags = 8;

  //set this to true to remove completely all the tags
  // (required because in the protobuf we cannot distinguish between an empty tags list and a non existent list)
  optional bool clearTags = 9;

  //new group identifier.
  //to keep the old value, leave out
  // to clear the group, set to an empty string
  optional string groupId = 10;


  //new status (valid for activities)
  optional yamcs.protobuf.activities.ExecutionStatus status = 11;
  
  //if the manual activity has failed, this may indicate the reason
  optional string failureReason = 12;
  
}

message ListItemsRequest {
  //Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;
      
  optional int32 limit = 3;

  // Continuation token returned by a previous page response.
  optional string next = 4;
  
  optional google.protobuf.Timestamp start = 5;
  optional google.protobuf.Timestamp stop = 6;
  
  // Use the band defined source and filter
  optional string band = 7;

  // If the band is not specified, these filters and the source above will be used
  repeated ItemFilter filters = 8;
  
  // If true, send the items with full details
  // If false, some details like the description will be omited from the listed items
  optional bool details = 9;
}


message DeleteItemRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;
}


message GetItemLogRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;
}


message AddItemLogRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;

  optional LogEntry entry = 4;
}

message DeleteTimelineGroupRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Group identifier
  optional string id = 3;
}

message ListItemsResponse {
  //item source
  optional string source = 1;

  //items
  repeated TimelineItem items = 2;

  // Token indicating the response is only partial. More results can then
  // be obtained by performing the same request (including all original
  // query parameters) and setting the ``next`` parameter to this token.
  optional string continuationToken = 3;
}

message TimelineSourceCapabilities {
	optional bool readOnly = 1;
	optional bool hasManualActivities = 2;
	optional bool hasAutomatedActivities = 3;
	optional bool hasEventGroups = 4;
	optional bool hasActivityGroups = 5;
}

message ListSourcesRequest {
  // Yamcs instance name
  optional string instance = 1;
}

message ListSourcesResponse {
  map<string, TimelineSourceCapabilities> sources = 1;
}

message ListTimelineTagsRequest {
  // Yamcs instance name
  optional string instance = 1;

  optional string source = 2;
}

message ListTimelineTagsResponse {
  repeated string tags = 1;
}



/******************* End Items ***********************/


/******************* Bands ***********************/
message AddBandRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Band name
  optional string name = 2;

  //if true, all users have access to this band, otherwise only the user who has created it 
  optional bool shared = 3;
  
  //the band contains only items from this source
  optional string source = 4;

  // Items containing these tags will be part of the timeline
  // this is deprecated, the filters below should be used instead
  repeated string tags = 5 [deprecated = true];
  
  //a query filter which can be used to limit additionally the items which are part of the band
  repeated ItemFilter filters = 6;
  
  // Type of band
  optional TimelineBandType type = 7;

  // Band description
  optional string description = 8;

  // Additional properties used by yamcs-web to render this band
  map<string, string> properties = 9;
}

message GetBandRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item identifier
  optional string id = 3;
}

message UpdateBandRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Band identifier
  optional string id = 2;
  
  // Band name
  optional string name = 3;
  
  // Band description
  optional string description = 4;
  
  //if true, all users have access to this band, otherwise only the user who has created it
  optional bool shared = 5;
  
  // Items containing these tags will be part of the timeline
  repeated string tags = 6;

  // Additional properties used by yamcs-web to render this band
  map<string, string> properties = 7;

  //Where the items shown on this band come from
  optional string source = 8;

  //filters to apply when retrieving the items
  repeated ItemFilter filters = 9;
}

message ListBandsRequest {
  //Yamcs instance name
  optional string instance = 1;
}

message DeleteBandRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Item identifier
  optional string id = 3;
}

message ListBandsResponse {
  repeated TimelineBand bands = 1;
}
/******************* End Bands ***********************/

/******************* Views ***********************/
message AddViewRequest {
  // Yamcs instance name
  optional string instance = 1;

  // View name
  optional string name = 2;

  // View description
  optional string description = 3;

  // The bands from this view
  repeated string bands = 4;
}

message GetViewRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item identifier
  optional string id = 3;
}

message ListViewsRequest {
  // Yamcs instance name
  optional string instance = 1;
}

message UpdateViewRequest {
  // Yamcs instance name
  optional string instance = 1;
  
  // View identifier
  optional string id = 2;

  // View name
  optional string name = 3;

  // View description
  optional string description = 4;

  // The bands from this view
  repeated string bands = 5;
}

message DeleteViewRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Item identifier
  optional string id = 3;
}

message ListViewsResponse {
  repeated TimelineView views = 1;
}
/******************* End Views ***********************/

/******************* Activities **********************/

message StartActivityRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;
}


message EndActivityRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;

  //one of the ABORTED, COMPLETED or FAILED
  optional yamcs.protobuf.activities.ExecutionStatus endStatus = 4;

  //if endStatus is FAILED or ABORTED, this may indicate the reason
  optional string failureReason = 5;
}

/****************** End Activities *********************/

//an item matches the filter if it matches any of the criteria from the list.
//if the list is empty, the filter will not match
message ItemFilter {
  // The filter criteria depends very much of the source which provides the item
  // rdb source
  //  supported key is "tag"
  //   -> An item matches if the value proprty is among its tags
  // commands source
  //  supported key is "cmdNamePattern"
  //  value is considered as a regexp and match against the cmdName from the cmdhist table
  message FilterCriterion {
    optional string key = 1;
    optional string value = 2;
  }

 repeated FilterCriterion criteria = 1;
}
